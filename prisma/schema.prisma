generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(uuid())
  name          String
  email         String       @unique
  passwordHash  String
  role          UserRole
  phone         String?
  document      String?
  photoUrl      String?
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())

  bookings      Booking[]
  reviews       Review[]
  vehicles      Vehicle[]     @relation("DriverVehicles")
  checklists    VehicleCheck[] @relation("CompletedChecklists")
  reports       Report[]      @relation("GeneratedReports")
  agent         Agent?
}

enum UserRole {
  passenger
  driver
  agent
  admin
}

model Vehicle {
  id               String         @id @default(uuid())
  model            String
  plate            String         @unique
  capacity         Int
  year             Int
  status           VehicleStatus
  driver           User           @relation("DriverVehicles", fields: [driverId], references: [id])
  driverId         String
  avgRating        Float          @default(0)
  mileage          Int

  trips            Trip[]
  checklists       VehicleCheck[]
}

enum VehicleStatus {
  active
  maintenance
  inactive
}

model Route {
  id               String   @id @default(uuid())
  origin           String
  destination      String
  estimatedTime    String
  distanceKm       Float
  basePrice        Float
  minPassengers    Int
  isActive         Boolean   @default(true)

  trips            Trip[]
}

model Trip {
  id               String   @id @default(uuid())
  route            Route    @relation(fields: [routeId], references: [id])
  routeId          String
  vehicle          Vehicle  @relation(fields: [vehicleId], references: [id])
  vehicleId        String
  departureDate    DateTime
  departureTime    String
  status           TripStatus
  currentBookings  Int       @default(0)
  minQuota         Int
  estimatedCost    Float
  quorumReached    Boolean   @default(false)
  confirmedAt      DateTime?

  bookings         Booking[]
  checklists       VehicleCheck[]
  reviews          Review[]
}

enum TripStatus {
  open
  confirmed
  canceled
  completed
}

model Booking {
  id              String           @id @default(uuid())
  trip            Trip             @relation(fields: [tripId], references: [id])
  tripId          String
  user            User             @relation(fields: [userId], references: [id])
  userId          String
  status          BookingStatus
  amountPaid      Float
  paymentMethod   PaymentMethod
  bookedAt        DateTime         @default(now())
  checkinDone     Boolean          @default(false)

  payment         Payment?
}

enum BookingStatus {
  pending
  confirmed
  canceled
  refunded
}

enum PaymentMethod {
  pix
  card
  free
}

model Payment {
  id              String         @id @default(uuid())
  booking         Booking        @relation(fields: [bookingId], references: [id])
  bookingId       String         @unique
  gateway         PaymentGateway
  status          PaymentStatus
  amount          Float
  paidAt          DateTime
  transactionId   String
}

enum PaymentGateway {
  mercadopago
  stripe
  manual
}

enum PaymentStatus {
  approved
  failed
  pending
}

model VehicleCheck {
  id              String   @id @default(uuid())
  vehicle         Vehicle  @relation(fields: [vehicleId], references: [id])
  vehicleId       String
  trip            Trip     @relation(fields: [tripId], references: [id])
  tripId          String
  driver          User     @relation("CompletedChecklists", fields: [driverId], references: [id])
  driverId        String
  brakesOk        Boolean
  tiresOk         Boolean
  oilOk           Boolean
  notes           String?
  checkedAt       DateTime @default(now())
}

model Review {
  id               String   @id @default(uuid())
  trip             Trip     @relation(fields: [tripId], references: [id])
  tripId           String
  user             User     @relation(fields: [userId], references: [id])
  userId           String
  driverRating     Int
  vehicleRating    Int
  comments         String?
  reviewedAt       DateTime @default(now())
}

model Agent {
  id               String   @id @default(uuid())
  user             User     @relation(fields: [userId], references: [id])
  userId           String   @unique
  region           String
  commissionRate   Float
  totalSales       Int      @default(0)
  isActive         Boolean  @default(true)
}

model Report {
  id               String   @id @default(uuid())
  type             ReportType
  startDate        DateTime
  endDate          DateTime
  generatedBy      User     @relation("GeneratedReports", fields: [generatedById], references: [id])
  generatedById    String
  filePath         String
}

enum ReportType {
  sales
  trips
  reviews
}
